import { Elysia, t } from "elysia";
import { callGeminiAPI } from "../utils/geminiClient";
import { normalize } from "../utils/normalize";

const GREETINGS = ["oi", "ol√°", "ola", "bom dia", "boa tarde", "boa noite"];
const ALLOWED_TOPICS = [
  // Institui√ß√£o
  "unifor",
  "universidade de fortaleza",
  "faculdade",

  // Plataformas e ensino
  "ava",
  "online",
  "ensino a dist√¢ncia",
  "ead",
  "ensino",

  // Processos seletivos e matr√≠cula
  "vestibular",
  "processo seletivo",
  "inscri√ß√£o",
  "inscri√ß√µes",
  "matr√≠cula",
  "matr√≠culas",

  // Cursos e modalidades
  "curso",
  "cursos",
  "gradua√ß√£o",
  "gradua√ß√µes",
  "p√≥s-gradua√ß√£o",
  "mestrado",
  "doutorado",
  "especializa√ß√£o",
  "especializa√ß√µes",

  // Infraestrutura
  "estrutura",
  "campus",
  "biblioteca",
  "restaurante",
  "restaurantes",
  "laborat√≥rio",
  "laborat√≥rios",
  "academia",

  // Eventos e servi√ßos
  "evento",
  "eventos",
  "servi√ßo",
  "servi√ßos",

  // Apoio estudantil e financeiro
  "fies",
  "sisu",
  "proUni",
  "bolsa",
  "bolsas",
  "financiamento",
  "financiamentos",
  "mensalidade",
  "mensalidades",
  "pagamento",
  "pagamentos",
  "desconto",
  "descontos",

  // Corpo docente e aulas
  "professor",
  "professores",
  "aula",
  "aulas",
  "hor√°rio",
  "hor√°rios",
  "calend√°rio",

  // Secretaria e documenta√ß√£o
  "secretaria",
  "documento",
  "documentos",
  "documenta√ß√£o",
  "documenta√ß√µes",
  "certificado",
  "certificados",
  "diploma",
  "diplomas",

  // Atendimento e suporte
  "atendimento",
  "suporte",
  "contato",

  // D√∫vidas e comunica√ß√£o
  "informa√ß√£o",
  "informa√ß√µes",
  "ajuda",
  "d√∫vida",
  "d√∫vidas",
  "pergunta",
  "perguntas",
  "resposta",
  "respostas",

  // Est√°gio
  "est√°gio",
];

export const moemaRoute = new Elysia().post(
  "/gemini/chat/moema",
  async ({ body }) => {
    const lastUserMessage = [...body.contents]
      .reverse()
      .find((msg) => msg.role === "user");

    const input = normalize(lastUserMessage?.parts[0]?.text || "");

    const isCurrentAllowed = ALLOWED_TOPICS.some((t) =>
      input.includes(normalize(t))
    );

    const lastAllowedTopic = [...body.contents]
      .map((msg) => msg.parts[0]?.text || "")
      .reverse()
      .find((msg) =>
        ALLOWED_TOPICS.some((t) => normalize(msg).includes(normalize(t)))
      );

    const enrichedInput =
      !isCurrentAllowed && lastAllowedTopic
        ? `${input} ${lastAllowedTopic}`
        : input;

    const isGreeting = GREETINGS.some((g) =>
      enrichedInput.includes(normalize(g))
    );

    const isAllowed = ALLOWED_TOPICS.some((t) =>
      enrichedInput.includes(normalize(t))
    );

    // Resposta especial para Estrutura de Dados com Paulo Cirillo
    const mentionsStructureWithCirillo =
      normalize(input).includes("estrutura de dados") &&
      (normalize(input).includes("paulo cirillo") ||
        normalize(input).includes("paulo cirilo"));

    if (mentionsStructureWithCirillo) {
      return {
        candidates: [
          {
            content: {
              role: "model",
              parts: [
                {
                  text: "Boa sorte na disciplina de Estrutura de Dados com o professor Paulo Cirillo! Se precisar de alguma informa√ß√£o sobre a Unifor, estou por aqui para ajudar üòä",
                },
              ],
            },
            finishReason: "STOP",
          },
        ],
      };
    }

    if (!isGreeting && !isAllowed) {
      return {
        candidates: [
          {
            content: {
              role: "model",
              parts: [
                {
                  text: "Desculpe, s√≥ posso responder perguntas relacionadas √† Unifor, como cursos, matr√≠cula, estrutura, servi√ßos e eventos da universidade. Como posso ajudar voc√™ com isso?",
                },
              ],
            },
            finishReason: "STOP",
          },
        ],
      };
    }

    const greetingPrompt = {
      role: "user",
      parts: [
        {
          text: "Voc√™ √© Moema, a assistente virtual da Unifor, que √© a Universidade de Fortaleza. Responda sempre em portugu√™s, de forma simp√°tica, clara e breve. Se a mensagem for apenas uma sauda√ß√£o, responda com uma ou duas frases acolhedoras e convide a pessoa a dizer como posso ajud√°-la com informa√ß√µes sobre a universidade.",
        },
      ],
    };

    const defaultPrompt = {
      role: "user",
      parts: [
        {
          text: "Voc√™ √© Moema, a assistente virtual da Unifor, que √© a Universidade de Fortaleza. Responda sempre em portugu√™s, de forma clara, acolhedora e objetiva. Use no m√°ximo 3 par√°grafos curtos. Seu papel √© ajudar com informa√ß√µes sobre cursos, matr√≠cula, estrutura da universidade, eventos, e demais servi√ßos oferecidos pela Unifor.",
        },
      ],
    };

    const systemPrompt =
      isGreeting && !isCurrentAllowed ? greetingPrompt : defaultPrompt;

    const payload = {
      contents: [systemPrompt, ...body.contents],
    };

    return await callGeminiAPI(payload);
  },
  {
    body: t.Object({
      contents: t.Array(
        t.Object({
          role: t.String(),
          parts: t.Array(t.Object({ text: t.String() })),
        })
      ),
    }),
  }
);
